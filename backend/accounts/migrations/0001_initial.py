# Generated by Django 4.2.7 on 2025-10-15 09:14

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.CharField(help_text='格式: S2021001234(学生) / F20210001(教师) / A00001(管理员)', max_length=20, primary_key=True, serialize=False, verbose_name='用户ID')),
                ('username', models.CharField(max_length=150, unique=True, validators=[django.core.validators.MinLengthValidator(3, '用户名至少3个字符')], verbose_name='用户名')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('real_name', models.CharField(max_length=50, verbose_name='真实姓名')),
                ('phone', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/%Y/%m/', verbose_name='头像')),
                ('is_active', models.BooleanField(default=True, verbose_name='账号是否激活')),
                ('is_staff', models.BooleanField(default=False, verbose_name='是否为员工')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='注册时间')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='最后登录时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'user',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('permission_id', models.AutoField(primary_key=True, serialize=False, verbose_name='权限ID')),
                ('permission_code', models.CharField(help_text='如: view_position, create_position', max_length=50, unique=True, verbose_name='权限代码')),
                ('permission_name', models.CharField(max_length=100, verbose_name='权限名称')),
                ('module', models.CharField(help_text='如: recruitment, application, timesheet', max_length=50, verbose_name='所属模块')),
                ('description', models.TextField(blank=True, null=True, verbose_name='权限描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '权限',
                'verbose_name_plural': '权限',
                'db_table': 'permission',
                'ordering': ['module', 'permission_code'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False, verbose_name='角色ID')),
                ('role_code', models.CharField(help_text='如: student, faculty, admin', max_length=20, unique=True, verbose_name='角色代码')),
                ('role_name', models.CharField(max_length=50, verbose_name='角色名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='角色描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '角色',
                'verbose_name_plural': '角色',
                'db_table': 'role',
                'ordering': ['role_id'],
            },
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='关联用户')),
                ('admin_id', models.CharField(max_length=20, unique=True, verbose_name='管理员编号')),
                ('department', models.CharField(max_length=100, verbose_name='部门')),
                ('position', models.CharField(max_length=50, verbose_name='职位')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '管理员信息',
                'verbose_name_plural': '管理员信息',
                'db_table': 'administrator',
                'ordering': ['admin_id'],
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='关联用户')),
                ('faculty_id', models.CharField(max_length=20, unique=True, verbose_name='工号')),
                ('department', models.CharField(max_length=100, verbose_name='院系')),
                ('title', models.CharField(help_text='如: 教授, 副教授, 讲师', max_length=50, verbose_name='职称')),
                ('office_location', models.CharField(blank=True, max_length=100, null=True, verbose_name='办公室')),
                ('research_area', models.TextField(blank=True, null=True, verbose_name='研究方向')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '教师信息',
                'verbose_name_plural': '教师信息',
                'db_table': 'faculty',
                'ordering': ['faculty_id'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='关联用户')),
                ('student_id', models.CharField(max_length=20, unique=True, verbose_name='学号')),
                ('department', models.CharField(max_length=100, verbose_name='院系')),
                ('major', models.CharField(max_length=100, verbose_name='专业')),
                ('grade', models.IntegerField(help_text='如: 2021', verbose_name='年级')),
                ('class_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='班级')),
                ('is_ta', models.BooleanField(default=False, verbose_name='是否为助教')),
                ('ta_since', models.DateField(blank=True, null=True, verbose_name='成为助教时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '学生信息',
                'verbose_name_plural': '学生信息',
                'db_table': 'student',
                'ordering': ['-grade', 'student_id'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, verbose_name='是否为主角色')),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='分配时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL, verbose_name='分配人')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.role', verbose_name='角色')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户角色',
                'verbose_name_plural': '用户角色',
                'db_table': 'user_role',
                'ordering': ['-is_primary', '-assigned_at'],
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('granted_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='授权时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.permission', verbose_name='权限')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.role', verbose_name='角色')),
            ],
            options={
                'verbose_name': '角色权限',
                'verbose_name_plural': '角色权限',
                'db_table': 'role_permission',
                'ordering': ['role', 'permission'],
            },
        ),
        migrations.AddIndex(
            model_name='permission',
            index=models.Index(fields=['module'], name='permission_module_1d483b_idx'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['user'], name='user_role_user_id_d8192c_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['role'], name='user_role_role_id_8c260c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrole',
            unique_together={('user', 'role')},
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_id'], name='student_student_97543b_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['department'], name='student_departm_5a814f_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['is_ta'], name='student_is_ta_dfa285_idx'),
        ),
        migrations.AddIndex(
            model_name='rolepermission',
            index=models.Index(fields=['role'], name='role_permis_role_id_92d8b7_idx'),
        ),
        migrations.AddIndex(
            model_name='rolepermission',
            index=models.Index(fields=['permission'], name='role_permis_permiss_9dac09_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rolepermission',
            unique_together={('role', 'permission')},
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['faculty_id'], name='faculty_faculty_d3fb85_idx'),
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['department'], name='faculty_departm_62c77d_idx'),
        ),
        migrations.AddIndex(
            model_name='administrator',
            index=models.Index(fields=['admin_id'], name='administrat_admin_i_9c95a7_idx'),
        ),
        migrations.AddIndex(
            model_name='administrator',
            index=models.Index(fields=['department'], name='administrat_departm_e933df_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='user_usernam_b79065_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='user_email_7bbb4c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='user_is_acti_7f3bc2_idx'),
        ),
    ]
